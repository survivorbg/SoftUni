using System;
namespace Finding_paths_in_labyrinth__backtracking_
{
    internal class Program
    {
        //Чрез този масив представяме лабиринта.
        //'*' - непроходими полета
        //старт - 0,0
        static char[,] lab =
        {

            {' ',' ',' ','*',' ',' ',' '},
            {'*','*',' ','*',' ','*',' '},
            {' ',' ',' ',' ',' ',' ',' '},
            {' ','*','*','*','*','*',' '},
            {' ',' ',' ',' ',' ',' ','e'},

        };


        static void Main(string[] args)
        {
            FindPath(0, 0); 
        }

        static void FindPath(int row, int col) 
        {
            //Проверяваме дали не сме излезли извън масива:
            if (
                (col < 0) || //ако индекса на колоната е по-малък от 0 и следователно-извън границите
                             //на масива

                (row < 0) ||//ако индекса на реда е по-малък от 0 и следоват. извън границите на масива

                (col == lab.GetLength(1)) || //ако индекса на колоната е по-голям от дължината на 
                                             //подмасива и следователно извън границите му

                (row == lab.GetLength(0)) //ако индекса на реда е по-голям от дължината на 
                                          //главният масив и следователно извън границите му
                )
            {
                //Означава, че сме извън масива (лабиринта);
                return; 
            }

            //Проверяваме дали не сме стигнали крайната ни цел 'е':

            if (lab[row, col] == 'e')
            {
                Console.WriteLine("Found an exit.");
            }

            //Проверяваме дали кутийката, на която сме, не е свободна.

            if (!(lab[row, col] == ' '))
            {
                return;
            }

            //Ако нито едно от тези условия е изпълнено, то означава че :
            // нито сме извън границите на масива
            // нито сме стигнали крайната цел  
            // нито кутийката е заета


            // И следователно я маркираме като заета със символа 's'
            lab[row, col] = 's';
            
            //Извикваме рекурсия във всяка една посока
            FindPath(row, col - 1);   //проверяваме ЛЯВО
            FindPath(row - 1, col);   //проверяваме ГОРЕ
            FindPath(row, col + 1);   //проверяваме ДЯСНО
            FindPath(row + 1, col);   //проверяваме ДОЛУ

            
            // ОТмаркираме кутийката, за да може отново да се използва 

            lab[row, col] = ' ';
        }
    }
}
